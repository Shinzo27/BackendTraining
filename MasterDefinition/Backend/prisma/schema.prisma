// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  gender Gender
  image String
  gr_number String?
  phone String
  address String
  department String?
  class String?
  roleId Int
  role Role @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  leaveRequest LeaveRequest[] @relation(name: "userId")
  requestTo LeaveRequest[] @relation(name: "requestTo")
  userLeave UserLeave[] @relation(name: "userLeave")
}

model Role {
  id Int @id @default(autoincrement())
  name String
  priority Int
  user User[]
}

enum LeaveType {
  FirstHalf
  SecondHalf
  FullDay
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

model LeaveRequest {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(name: "userId", fields: [userId], references: [id], onDelete: Cascade)
  startDate String
  endDate String
  requestToId String
  requestTo User @relation(name: "requestTo", fields: [requestToId], references: [id], onDelete: Cascade)
  leaveType LeaveType
  reason String
  status LeaveStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserLeave {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(name: "userLeave", fields: [userId], references: [id], onDelete: Cascade)
  totalLeave Int
  availableLeave Int
  usedLeave Int
  academicYear String
  totalWorkingDays Int
  attendacePercentage Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}